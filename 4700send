#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))

        self.remote_host = None
        self.remote_port = None
        self.window_size = 4
        self.unack_data = {}
        self.timeout = 0.5

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.log("Sending message '%s'" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.host, self.port))
        # record sent but unacknowledged msg
        self.unack_data[message["seq"]] = {"msg": message, "last_sent": time.time()}
        self.log(f"Unacknowledged data after sending: {list(self.unack_data.keys())}")

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            self.log("Received message %s" % data)
            return json.loads(data.decode("utf-8"))

    def run(self):
        seq = 0
        finished = False
        while True:
            sockets = [self.socket, sys.stdin]

            socks = select.select(sockets, [], [], self.timeout)[0]
            for conn in socks:
                if conn == self.socket:
                    data = self.recv(conn)
                    # delete the acknowledged message from unack_data dictionary and move the base pointer to the next message
                    if data and data.get("type") == "ack":
                        ack_data_seq = data["seq"]
                        self.log(f"ACK received for seq={ack_data_seq}")

                        if ack_data_seq in self.unack_data:
                            del self.unack_data[ack_data_seq]

                elif conn == sys.stdin:
                    # limit the unacknowledged packet to window size
                    if len(self.unack_data) >= self.window_size:
                        continue

                    data = sys.stdin.read(DATA_SIZE)
                    if len(data) == 0:
                        finished = True
                        break

                    msg = { "type": "msg", "data": data, "seq": seq }
                    self.send(msg)
                    seq += 1

            if finished and len(self.unack_data) == 0:
                self.log("All done!")
                sys.exit(0)

            # retransmit the timeout messages
            now = time.time()
            for sequence in self.unack_data:
                if now - self.unack_data[sequence]["last_sent"] > self.timeout:
                    self.log(f"Retransmitting message: seq: {sequence}")
                    self.send(self.unack_data[sequence]["msg"])
                    self.unack_data[sequence]["last_sent"] = now


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
