#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
import zlib

DATA_SIZE = 1375
FACTOR = 0.125

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))

        self.remote_host = None
        self.remote_port = None
        self.window_size = 1
        self.unack_data = {}
        self.timeout = 1
        self.estimated_rtt = 0.5
        self.fluctuation = 0.25
        self.ssthresh = 16

    def log(self, message):
        """
        Write a message to the log file
        :param message:
        """
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        """
        Calculate the checksum and add the attribute to the msg & send the msg
        :param message:
        """
        if "checksum" in message:
            del message["checksum"]

        message["checksum"] = self.compute_checksum(message)

        self.log("Sending message '%s'" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.host, self.port))
        # record sent but unacknowledged msg
        self.unack_data[message["seq"]] = {"msg": message, "last_sent": time.time()}

    def recv(self, socket):
        """
        Receive data and load the message in json
        :param socket:
        :return:
        """
        data, addr = socket.recvfrom(65535)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            try:
                message = json.loads(data.decode("utf-8"))
                self.log("Received message %s" % data)
                return message
            except json.JSONDecodeError as e:
                self.log(f"JSON decode error: {e}. Packet dropped.")
                return None

    def run(self):
        seq = 0
        finished = False
        while True:
            sockets = [self.socket, sys.stdin]

            socks = select.select(sockets, [], [], self.timeout)[0]
            for conn in socks:
                if conn == self.socket:
                    data = self.recv(conn)

                    if data is None:
                        continue

                    if not self.is_corrupted(data):
                        self.deal_msg_type(data)

                elif conn == sys.stdin:
                    # limit the unacknowledged packet to window size
                    if len(self.unack_data) >= self.window_size:
                        continue

                    data = sys.stdin.read(DATA_SIZE)
                    if len(data) == 0:
                        finished = True
                        break

                    msg = { "type": "msg", "data": data, "seq": seq }
                    self.send(msg)
                    seq += 1

            if finished and len(self.unack_data) == 0:
                self.log("All done!")
                sys.exit(0)

            # retransmit the timeout messages
            now = time.time()
            for sequence in list(self.unack_data.keys()):
                msg = self.unack_data[sequence]["msg"]
                if now - self.unack_data[sequence]["last_sent"] > self.timeout:
                    self.unack_data[sequence]["retransmit_count"] = self.unack_data[sequence].get("retransmit_count",
                                                                                                  0) + 1
                    if self.unack_data[sequence]["retransmit_count"] >= 5:
                        self.log(f"Too many retransmissions for seq {sequence}, reducing window size.")
                        self.handle_window_size()
                        self.unack_data[sequence]["last_sent"] = time.time()
                        continue

                    self.log(f"Retransmitting message: seq: {sequence}")
                    self.send(msg)


    def handle_ack(self, message):
        """
        Handle the ACK message, delete from the unack data.
        :param message:
        """
        if "seq" not in message:
            return

        data_seq = message["seq"]
        ack_timestamp = message["timestamp"]
        self.log(f"ACK received for seq={data_seq}")

        if data_seq in self.unack_data:
            self.compute_timeout(ack_timestamp, data_seq)
            del self.unack_data[data_seq]

            # adjust window size
            # slow start
            if self.window_size < self.ssthresh:
                self.window_size += 1
            else:
                # avoid congestion
                self.window_size += 1 / self.window_size


    def handle_corrupted(self, message):
        """
        Handle the corrupted message and retransmit.
        :param message:
        """
        if "seq" not in message:
            return

        data_seq = message["seq"]
        self.log(f"Received corrupted NACK for seq {data_seq}, retransmitting...")
        if data_seq in self.unack_data:
            self.send(self.unack_data[data_seq]["msg"])

        self.handle_window_size()

    def deal_msg_type(self, message):
        msg_type = message["type"]
        if msg_type == "ack":
            self.handle_ack(message)
        elif msg_type == "corrupted":
            self.handle_corrupted(message)


    def compute_checksum(self, message):
        """
        Compute the checksum for the message
        :param self:
        :param message:
        :return: the checksum
        """
        msg_json = json.dumps(message, sort_keys=True).encode("utf-8")
        return zlib.crc32(msg_json)


    def is_corrupted(self, message):
        """
        JSON decode and verify a packet by comparing checksums.
        :param message:
        :return:
        """
        if "checksum" not in message:
            self.log("Error: Received packet missing checksum; ignoring")
            return True

        received_checksum = message["checksum"]
        del message["checksum"]
        computed_checksum = self.compute_checksum(message)

        if received_checksum != computed_checksum:
            self.log("Error:  Received corrupted packet; ignoring")
            return True
        return False


    def compute_timeout(self, ack_timestamp, seq):
        """
        Update the timeout setting by calculating the RTT
        :param ack_timestamp: timestamp of the ACK message
        :param seq: sequence number of message
        :return:
        """
        send_time = self.unack_data[seq]["last_sent"]

        if send_time:
            rtt = ack_timestamp - send_time
            self.estimated_rtt = (1 - FACTOR) * self.estimated_rtt + FACTOR * rtt
            self.fluctuation = (1 - FACTOR) * self.fluctuation + FACTOR * abs(rtt - self.estimated_rtt)
            self.timeout = self.estimated_rtt + 4 * self.fluctuation
            self.log(f"RTT update: {self.estimated_rtt: .4f}s, timeout: {self.timeout: .4f}s")


    def handle_window_size(self):
        """
        Adjust the window size by observing the bandwidth
        :return:
        """
        self.ssthresh = max(4, self.window_size // 2)
        self.window_size = max(1, self.window_size // 2)
        self.window_size = 1



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
